# syntax=docker/dockerfile:1.6

##########################################################
# === Stage 1: Frontend build ===
##########################################################
FROM node:22 AS frontend-build

WORKDIR /app/frontend

# Copy frontend dependencies first (leverage Docker cache)
COPY frontend/package.json frontend/yarn.lock ./

# Install dependencies
RUN yarn config set network-timeout 600000 -g && yarn install --frozen-lockfile

# Copy frontend source and build
COPY frontend/ ./
RUN yarn build --outDir dist

##########################################################
# === Stage 2: Backend build ===
##########################################################
FROM python:3.13-slim-bookworm AS backend-build

WORKDIR /app

# Install build dependencies for Python native packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential python3-dev libxml2-dev libxslt-dev libffi-dev curl \
    && rm -rf /var/lib/apt/lists/*

# Copy backend dependency files first (Docker cache)
COPY backend/pyproject.toml backend/uv.lock* ./

# Install uv and Python dependencies
RUN curl -LsSf https://github.com/astral-sh/uv/releases/download/0.8.19/uv-installer.sh | sh \
    && export PATH="$HOME/.local/bin:$PATH" \
    && uv sync --locked --no-install-project --no-dev

# Copy backend source
COPY backend/src ./src

# Copy frontend dist
COPY --from=frontend-build /app/frontend/dist ./src/frontend/dist

# Copy prebuilt cities.db from workflow context
COPY backend/src/data/cities.db ./src/data/cities.db

##########################################################
# === Stage 3: Runtime ===
##########################################################
FROM python:3.13-slim-bookworm AS runtime

WORKDIR /app

# Install only runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libxml2 libxslt1.1 libffi8 \
    && rm -rf /var/lib/apt/lists/*

# Copy uv + prebuilt venv from backend build
COPY --from=backend-build /app/.venv /app/.venv
COPY --from=backend-build /root/.local /root/.local

# Copy backend (including frontend dist and cities.db)
COPY --from=backend-build /app/ .

# Environment
ENV PATH="/root/.local/bin:/app/.venv/bin:$PATH"
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Expose port
EXPOSE 8000

# Run FastAPI via uv
CMD ["uv", "run", "uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000"]
